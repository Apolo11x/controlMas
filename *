
CREATE OR REPLACE PACKAGE BODY notifications IS

FUNCTION verificador RETURN SYS_REFCURSOR IS
    v_cursor SYS_REFCURSOR;
    v_id_contrato NUMBER := NULL;
    v_id_plan NUMBER := NULL;
    v_id_usuario NUMBER := NULL;
    v_dias_desde_inicio NUMBER := NULL;
    v_id_notificacion NUMBER := NULL;
    v_plantilla VARCHAR2(4000) := NULL;
BEGIN
    OPEN v_cursor FOR
        SELECT c.id_contrato, c.id_plan, c.id_usuario, TRUNC(SYSDATE - c.fecha_inicio) AS dias_desde_inicio, n.id_notificacion, n.plantilla
        FROM cm_contrato c
        JOIN cm_plan p ON c.id_plan = p.id_plan
        LEFT JOIN cm_notificacion n 
            ON n.id_plan = c.id_plan 
            AND n.num_dias <= TRUNC(SYSDATE - c.fecha_inicio)
        WHERE c.estado = 'Activo' AND 
              (c.fecha_fin IS NULL OR c.fecha_fin > SYSDATE) AND 
              TRUNC(SYSDATE - c.fecha_inicio) > 0 AND 
              TRUNC(SYSDATE - c.fecha_inicio) > p.nro_dias
        ORDER BY c.id_contrato, n.num_dias DESC;

    LOOP
        FETCH v_cursor INTO v_id_contrato, v_id_plan, v_id_usuario, v_dias_desde_inicio, v_id_notificacion, v_plantilla;
        EXIT WHEN v_cursor%NOTFOUND;

        -- Aquí puedes agregar la lógica que necesites para procesar cada fila
        DBMS_OUTPUT.PUT_LINE('Contrato: ' || v_id_contrato || ', Usuario: ' || v_id_usuario);
    END LOOP;

    -- Cerrar el cursor
    IF v_cursor%ISOPEN THEN
        CLOSE v_cursor;
    END IF;
    -- Devolver el cursor
    RETURN v_cursor; 
END verificador;

END notifications;
/